// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strings"
)

const (
	// EventOutcomeUnspecified is a EventOutcome of type unspecified.
	EventOutcomeUnspecified EventOutcome = "unspecified"
	// EventOutcomeSuccess is a EventOutcome of type success.
	EventOutcomeSuccess EventOutcome = "success"
	// EventOutcomeSystemFailure is a EventOutcome of type system failure.
	EventOutcomeSystemFailure EventOutcome = "system failure"
	// EventOutcomeValidationFailure is a EventOutcome of type validation failure.
	EventOutcomeValidationFailure EventOutcome = "validation failure"
)

var ErrInvalidEventOutcome = fmt.Errorf("not a valid EventOutcome, try [%s]", strings.Join(_EventOutcomeNames, ", "))

var _EventOutcomeNames = []string{
	string(EventOutcomeUnspecified),
	string(EventOutcomeSuccess),
	string(EventOutcomeSystemFailure),
	string(EventOutcomeValidationFailure),
}

// EventOutcomeNames returns a list of possible string values of EventOutcome.
func EventOutcomeNames() []string {
	tmp := make([]string, len(_EventOutcomeNames))
	copy(tmp, _EventOutcomeNames)
	return tmp
}

// String implements the Stringer interface.
func (x EventOutcome) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x EventOutcome) IsValid() bool {
	_, err := ParseEventOutcome(string(x))
	return err == nil
}

var _EventOutcomeValue = map[string]EventOutcome{
	"unspecified":        EventOutcomeUnspecified,
	"success":            EventOutcomeSuccess,
	"system failure":     EventOutcomeSystemFailure,
	"validation failure": EventOutcomeValidationFailure,
}

// ParseEventOutcome attempts to convert a string to a EventOutcome.
func ParseEventOutcome(name string) (EventOutcome, error) {
	if x, ok := _EventOutcomeValue[name]; ok {
		return x, nil
	}
	return EventOutcome(""), fmt.Errorf("%s is %w", name, ErrInvalidEventOutcome)
}

func (x EventOutcome) Ptr() *EventOutcome {
	return &x
}

// MarshalText implements the text marshaller method.
func (x EventOutcome) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *EventOutcome) UnmarshalText(text []byte) error {
	tmp, err := ParseEventOutcome(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errEventOutcomeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *EventOutcome) Scan(value interface{}) (err error) {
	if value == nil {
		*x = EventOutcome("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseEventOutcome(v)
	case []byte:
		*x, err = ParseEventOutcome(string(v))
	case EventOutcome:
		*x = v
	case *EventOutcome:
		if v == nil {
			return errEventOutcomeNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errEventOutcomeNilPtr
		}
		*x, err = ParseEventOutcome(*v)
	default:
		return errors.New("invalid type for EventOutcome")
	}

	return
}

// Value implements the driver Valuer interface.
func (x EventOutcome) Value() (driver.Value, error) {
	return x.String(), nil
}

// Set implements the Golang flag.Value interface func.
func (x *EventOutcome) Set(val string) error {
	v, err := ParseEventOutcome(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *EventOutcome) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *EventOutcome) Type() string {
	return "EventOutcome"
}

// Values implements the entgo.io/ent/schema/field EnumValues interface.
func (x EventOutcome) Values() []string {
	return EventOutcomeNames()
}

// EventOutcomeInterfaces returns an interface list of possible values of EventOutcome.
func EventOutcomeInterfaces() []interface{} {
	var tmp []interface{}
	for _, v := range _EventOutcomeNames {
		tmp = append(tmp, v)
	}
	return tmp
}

// ParseEventOutcomeWithDefault attempts to convert a string to a ContentType.
// It returns the default value if name is empty.
func ParseEventOutcomeWithDefault(name string) (EventOutcome, error) {
	if name == "" {
		return _EventOutcomeValue[_EventOutcomeNames[0]], nil
	}
	if x, ok := _EventOutcomeValue[name]; ok {
		return x, nil
	}
	return EventOutcome(""), fmt.Errorf("%s is not a valid EventOutcome, try [%s]", name, strings.Join(_EventOutcomeNames, ", "))
}

// NormalizeEventOutcome attempts to parse a and normalize string as content type.
// It returns the input untouched if name fails to be parsed.
// Example:
//
//	"enUM" will be normalized (if possible) to "Enum"
func NormalizeEventOutcome(name string) string {
	res, err := ParseEventOutcome(name)
	if err != nil {
		return name
	}
	return res.String()
}
